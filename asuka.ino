#include <Arduino.h>
#include <U8g2lib.h>

#ifdef U8X8_HAVE_HW_SPI
#include <SPI.h>
#endif
#ifdef U8X8_HAVE_HW_I2C
#include <Wire.h>
#endif

#define SCL 12
#define SDA 11

U8G2_SSD1306_128X64_NONAME_F_SW_I2C u8g2(U8G2_R0, /* clock=*/ SCL, /* data=*/ SDA, /* reset=*/ U8X8_PIN_NONE);   // All Boards without Reset of the Display

#define blink_width 46
#define blink_height 14
static const unsigned char blink_bits[] U8X8_PROGMEM = {
  0xF8, 0x7F, 0x26, 0x0A, 0x00, 0x3E, 0x18, 0xF0, 0x6C, 0x0C, 0x00, 0x34, 
  0x00, 0x00, 0x58, 0x00, 0x00, 0x38, 0x00, 0x00, 0x50, 0x00, 0x00, 0x30, 
  0x00, 0x00, 0xA0, 0x00, 0x00, 0x30, 0x00, 0x00, 0x40, 0x00, 0xF0, 0x31, 
  0x00, 0x00, 0x80, 0xE1, 0x5F, 0x38, 0x18, 0x20, 0x00, 0x81, 0xAF, 0x18, 
  0xF4, 0x1F, 0x00, 0x00, 0x00, 0x08, 0xC8, 0x07, 0x00, 0x00, 0x00, 0x28, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x01, 0x00, 0x00, 0x00, 0x00, 0x2C, 
  0x01, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x02, 0x00, 0x00, 0x00, 0x00, 0x04, 
  };


#define blink_offset_x 42
#define blink_offset_y 31

#define image_width 128
#define image_height 64
static const unsigned char image[] U8X8_PROGMEM = {
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF1, 0x80, 0x01, 0x03, 0xC0, 0x07, 0xE0, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0xC3, 0x00, 
  0x0E, 0x80, 0xFF, 0xCF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
  0x7F, 0x3E, 0x5F, 0x00, 0xFC, 0x01, 0xFF, 0x9F, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xFF, 0x3F, 0x1B, 0x78, 0x00, 0xE0, 0x3F, 0xFF, 0x3F, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x3F, 0x80, 0x0D, 0x20, 0x00, 
  0x00, 0xF8, 0xFF, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x9F, 
  0xFF, 0x0C, 0x00, 0x00, 0x00, 0x00, 0xFC, 0x7F, 0xFE, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xCF, 0x7F, 0x06, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xFF, 
  0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xEF, 0x7F, 0x06, 0x00, 0x00, 
  0x00, 0x00, 0x80, 0xFF, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE7, 
  0xFF, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0xFE, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xF7, 0xFF, 0x01, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xFF, 
  0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF7, 0x7F, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0xFE, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF7, 
  0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0xFE, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xF7, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 
  0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF7, 0x03, 0x00, 0x00, 0x10, 
  0x00, 0x00, 0x00, 0xE0, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF7, 
  0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x80, 0xC1, 0xF9, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0x77, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x82, 
  0xFB, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x37, 0x10, 0x00, 0x10, 0x40, 
  0x00, 0x00, 0x00, 0x84, 0xF3, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x13, 
  0x0C, 0x00, 0x98, 0x80, 0x00, 0x02, 0x00, 0x08, 0xE7, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0x0B, 0x07, 0x00, 0x8C, 0x80, 0x01, 0x0C, 0x10, 0x18, 
  0xEE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x89, 0x03, 0x00, 0x8C, 0x00, 
  0x03, 0x18, 0x60, 0x30, 0xCE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xCD, 
  0x03, 0x40, 0x8E, 0x00, 0x0F, 0x70, 0xE0, 0x60, 0xDE, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xE5, 0x01, 0x20, 0x8F, 0x01, 0x1E, 0xE0, 0xC0, 0xE1, 
  0xDE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE5, 0x01, 0x20, 0xCF, 0x21, 
  0x76, 0xC0, 0x81, 0xC3, 0xD6, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF5, 
  0x00, 0x90, 0xDB, 0x21, 0xE4, 0x81, 0x87, 0xC7, 0x96, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xF5, 0x00, 0x98, 0x51, 0x63, 0x8C, 0x07, 0x0F, 0xCF, 
  0xB6, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7D, 0x00, 0xD8, 0x51, 0x63, 
  0x08, 0x3F, 0x1E, 0xCF, 0xB2, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7D, 
  0x04, 0xDC, 0x50, 0xC7, 0x18, 0xFC, 0x3C, 0xDE, 0xB3, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0x7D, 0x04, 0xDC, 0x50, 0xC7, 0x19, 0xF0, 0x7B, 0xDE, 
  0x23, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7D, 0x06, 0x5E, 0x50, 0xCE, 
  0x11, 0xC0, 0x77, 0xDE, 0x63, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7D, 
  0x06, 0x76, 0x60, 0xCC, 0xB2, 0x03, 0xFE, 0xFE, 0x61, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0x79, 0x06, 0x26, 0x60, 0x9C, 0x14, 0x00, 0xF8, 0xFE, 
  0x61, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB, 0x06, 0xE3, 0xFF, 0x99, 
  0x28, 0x0F, 0xF8, 0xFF, 0x60, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF3, 
  0x16, 0x63, 0xC0, 0xB3, 0xB1, 0x38, 0xD0, 0xFB, 0x60, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xF7, 0x16, 0x03, 0x3C, 0x60, 0x61, 0xC5, 0xE1, 0xDB, 
  0x61, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF3, 0x17, 0x01, 0x42, 0x40, 
  0x41, 0x8D, 0xC0, 0xDB, 0x61, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xEB, 
  0x2F, 0x01, 0xA1, 0x80, 0x02, 0x0F, 0xC1, 0xCB, 0x61, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xEB, 0x2F, 0xC1, 0x34, 0x00, 0x01, 0x0F, 0xC0, 0xC9, 
  0x63, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xCB, 0x6F, 0x41, 0x3C, 0x00, 
  0x06, 0x0E, 0xE0, 0xC2, 0x63, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xCB, 
  0xFF, 0x61, 0x3C, 0x00, 0x04, 0x0E, 0x60, 0xC4, 0x63, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xCB, 0xFF, 0x01, 0x3C, 0x00, 0x00, 0x00, 0x20, 0x87, 
  0x67, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x8B, 0x3F, 0x02, 0x18, 0x00, 
  0x00, 0x00, 0xA0, 0x84, 0x67, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x8B, 
  0x13, 0x02, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x84, 0x67, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0x8B, 0x93, 0x04, 0x00, 0x00, 0x00, 0x00, 0xB0, 0x84, 
  0x6F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x8B, 0xC1, 0x05, 0x00, 0x00, 
  0x00, 0x00, 0x30, 0x04, 0x6F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x8B, 
  0x21, 0x0B, 0x00, 0x00, 0x00, 0x00, 0x10, 0x04, 0x6F, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0x8B, 0x21, 0x09, 0x00, 0x80, 0x00, 0x00, 0x18, 0x07, 
  0x6F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x9B, 0x61, 0x0A, 0x00, 0x80, 
  0x00, 0x00, 0x88, 0x03, 0x6F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x9B, 
  0x61, 0x1C, 0x00, 0x00, 0x00, 0x00, 0xC8, 0x03, 0x6E, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0x9B, 0xC0, 0x19, 0x00, 0x00, 0x00, 0x00, 0xEC, 0x03, 
  0x6E, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xDB, 0xC0, 0x23, 0x00, 0x00, 
  0x00, 0x00, 0xF4, 0x03, 0x6E, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xDB, 
  0x80, 0x27, 0x00, 0x10, 0x04, 0x00, 0xFE, 0x03, 0x6C, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xDB, 0x80, 0x4F, 0x00, 0xE0, 0x03, 0x00, 0xFE, 0x01, 
  0x7C, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x5B, 0x00, 0xFF, 0x00, 0x00, 
  0x00, 0x00, 0xFF, 0x01, 0x7C, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x53, 
  0x00, 0xFF, 0x01, 0x00, 0x00, 0x80, 0xFF, 0x01, 0x78, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0x77, 0x00, 0xFF, 0x03, 0x00, 0x00, 0xC0, 0xFF, 0x81, 
  0x78, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x77, 0x80, 0xFF, 0x07, 0x00, 
  0x00, 0xE0, 0xFF, 0x01, 0x70, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x77, 
  0x80, 0xFF, 0x1F, 0x00, 0x00, 0xF0, 0xFF, 0x01, 0x71, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0x37, 0x80, 0xFF, 0x3F, 0x00, 0x00, 0xF8, 0xFF, 0x01, 
  0x61, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x37, 0x84, 0xFF, 0xFF, 0x00, 
  0x00, 0xFC, 0xFF, 0x03, 0x62, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x37, 
  0x84, 0xFF, 0xFF, 0x01, 0x00, 0xFE, 0xFF, 0x03, 0x42, 0xFE, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0x17, 0x84, 0xFF, 0xFF, 0x03, 0x80, 0xFF, 0xFF, 0x03, 
  0xC2, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x17, 0x84, 0xFF, 0xFF, 0x0E, 
  0xC0, 0xF3, 0xFF, 0x03, 0x84, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x13, 
  0x84, 0xFF, 0xFF, 0x3C, 0xF0, 0xE0, 0xFF, 0x07, 0x84, 0xFC, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0x0B, 0x86, 0xFF, 0xFF, 0xF0, 0x7F, 0xE0, 0xFF, 0x07, 
  0x8C, 0xFD, 0xFF, 0xFF,
};

#define baka_width 9
#define baka_height 7
static const unsigned char baka_bits[] U8X8_PROGMEM = {
  0xFE, 0x01, 0xFF, 0x01, 0xFF, 0x00, 0x86, 0x00, 0x82, 0x00, 0x44, 0x00, 
  0x38, 0x00, };

#define baka_offset_x 59

#define baka_offset_y 50

static int blink_counter = 0;
static int baka_counter = 0;

void setup() {
  // put your setup code here, to run once:
  u8g2.begin();
  u8g2.setDrawColor(0);
  u8g2.setFont(u8g2_font_courB10_tr);
  randomSeed(analogRead(0));
}

void draw_asuka(){
  u8g2.setDrawColor(0);
  u8g2.drawXBMP(0, 0, image_width, image_height, image);
  u8g2.sendBuffer();
}

void draw_blink(){
  if(blink_counter < 5){
    blink_counter += random(1, 4);
    return;
  }
  u8g2.setDrawColor(0);
  u8g2.drawXBMP(blink_offset_x, blink_offset_y, blink_width, blink_height, blink_bits);
  u8g2.sendBuffer();
  delay(100);
  blink_counter = 0;
  draw_asuka();
}

void draw_baka(){
  if(baka_counter < 10){
    baka_counter += random(1, 3);
    return;
  }
  u8g2.setDrawColor(0);
  u8g2.drawXBMP(baka_offset_x, baka_offset_y, baka_width, baka_height, baka_bits);
  u8g2.setDrawColor(0);
  u8g2.drawRBox(0, 64 - 10, 48, 10, 0);
  u8g2.setDrawColor(1);
  u8g2.drawStr(0, 64, "Baka!");
  u8g2.sendBuffer();
  delay(500);
  baka_counter = 0;
}

void loop() {
  // put your main code here, to run repeatedly:
  u8g2.clearBuffer();
  draw_asuka();
  draw_baka();
  draw_blink();
  delay(1000);
}
